import os
import pandas as pd
import torch
import numpy as np
from sklearn.utils.class_weight import compute_class_weight
from sklearn.utils import resample
from typing import Dict, List, Tuple

# กำหนดพาทของโฟลเดอร์ที่เก็บข้อมูล
BASE_DATA_PATH = r"C:\CNNLSTM\scripts\separated_data"


def get_class_name(feature_value: int) -> str:
    """
    แปลงค่า feature เป็นชื่อคลาส
    """
    class_names = {
        0: "Non-request",
        1: "Both hands",
        2: "Left hand",
        3: "Right hand"
    }
    return class_names.get(feature_value, "Unknown")


def load_data_from_files() -> Tuple[np.ndarray, np.ndarray]:
    """
    โหลดข้อมูลจากทุกไฟล์และรวมเข้าด้วยกัน โดยใช้คอลัมน์ feature เป็น label

    Returns:
        Tuple[np.ndarray, np.ndarray]: (features, labels)
    """
    all_features = []
    all_labels = []

    print("Loading data from files...")
    for filename in os.listdir(BASE_DATA_PATH):
        if filename.endswith('.csv'):
            file_path = os.path.join(BASE_DATA_PATH, filename)
            print(f"Processing {filename}...")

            # อ่านข้อมูลจากไฟล์
            data = pd.read_csv(file_path)

            # ดึงข้อมูล features (ทุกคอลัมน์ยกเว้น 2 คอลัมน์สุดท้าย)
            feature_cols = data.iloc[:, 1:-2].values

            # ดึง feature column (คอลัมน์สุดท้ายที่สอง) เป็น label
            labels = data.iloc[:, -2].values

            all_features.append(feature_cols)
            all_labels.append(labels)

    # รวมข้อมูลทั้งหมด
    features = np.vstack(all_features)
    labels = np.concatenate(all_labels)

    return features, labels


def balance_classes(X: torch.Tensor, y: torch.Tensor, target_size: int = None) -> Tuple[torch.Tensor, torch.Tensor]:
    """
    ทำ random under-sampling บน majority class
    """
    X_np = X.numpy()
    y_np = y.numpy()

    # นับจำนวนข้อมูลในแต่ละคลาส
    unique_classes, class_counts = np.unique(y_np, return_counts=True)
    print("\nOriginal class distribution:")
    for cls, count in zip(unique_classes, class_counts):
        print(f"Class {cls} ({get_class_name(cls)}): {count} samples")

    # ถ้าไม่ระบุ target_size ให้ใช้ขนาดของคลาสที่ใหญ่เป็นอันดับ 2
    if target_size is None:
        sorted_counts = np.sort(class_counts)
        target_size = int(sorted_counts[-2])  # ใช้ขนาดของคลาสที่ใหญ่เป็นอันดับ 2

    # ทำ under-sampling สำหรับแต่ละคลาส
    balanced_indices = []
    for cls in unique_classes:
        cls_indices = np.where(y_np == cls)[0]
        if len(cls_indices) > target_size:
            # สุ่มเลือกข้อมูล
            selected_indices = np.random.choice(cls_indices, size=target_size, replace=False)
            balanced_indices.extend(selected_indices)
        else:
            # ใช้ข้อมูลทั้งหมดถ้ามีน้อยกว่า target_size
            balanced_indices.extend(cls_indices)

    # สุ่มสลับลำดับข้อมูล
    np.random.shuffle(balanced_indices)

    # เลือกข้อมูลตาม indices
    X_balanced = X_np[balanced_indices]
    y_balanced = y_np[balanced_indices]

    # แปลงกลับเป็น tensor
    X_balanced = torch.tensor(X_balanced, dtype=torch.float32)
    y_balanced = torch.tensor(y_balanced, dtype=torch.long)

    return X_balanced, y_balanced


def prepare_data(features: np.ndarray, labels: np.ndarray, window_size: int = 20, stride: int = 1) -> Tuple[
    torch.Tensor, torch.Tensor]:
    """
    เตรียมข้อมูลโดยการสร้าง sliding windows
    """
    X, y = [], []
    for i in range(0, len(features) - window_size + 1, stride):
        window_features = features[i:i + window_size]
        window_label = labels[i + window_size - 1]
        X.append(window_features)
        y.append(window_label)

    X = torch.tensor(X, dtype=torch.float32)
    y = torch.tensor(y, dtype=torch.long)
    return X, y


def prepare_cross_validation_data():
    """
    เตรียมข้อมูลสำหรับ cross validation โดยไม่แบ่ง train/test

    Returns:
        Tuple[torch.Tensor, torch.Tensor]: (X_balanced, y_balanced)
    """
    # โหลดข้อมูลจากไฟล์
    features, labels = load_data_from_files()

    # เตรียมข้อมูลด้วย sliding windows
    X, y = prepare_data(features, labels)

    print("\nInitial data distribution:")
    unique_labels, counts = np.unique(y.numpy(), return_counts=True)
    for label, count in zip(unique_labels, counts):
        print(f"Class {label} ({get_class_name(label)}): {count} samples ({count / len(y) * 100:.2f}%)")

    # ทำ balancing
    print("\nBalancing dataset...")
    X_balanced, y_balanced = balance_classes(X, y)

    print("\nBalanced data distribution:")
    unique_labels, counts = np.unique(y_balanced.numpy(), return_counts=True)
    for label, count in zip(unique_labels, counts):
        print(f"Class {label} ({get_class_name(label)}): {count} samples ({count / len(y_balanced) * 100:.2f}%)")

    return X_balanced, y_balanced


if __name__ == "__main__":
    X, y = prepare_cross_validation_data()
    print("\nPreprocessing completed successfully!")
    print("\n--------------------------------------------------------")
